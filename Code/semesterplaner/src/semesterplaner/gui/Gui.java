package semesterplaner.gui;

import java.awt.Color;
import java.awt.Point;
import java.io.*;
import java.io.File;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Locale;
import java.util.TreeSet;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;


import javax.swing.BoundedRangeModel;
import javax.swing.filechooser.FileFilter;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.*; 
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import semesterplaner.datenstruktur.*;
import semesterplaner.exceptions.ContainerException;
import semesterplaner.libs.FunctionCollection;
import semesterplaner.libs.SplitTable.*;
import semesterplaner.datenstruktur.Termin;
import semesterplaner.export.BinaryEx;
import semesterplaner.libs.TerminKonfliktContainer;



/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Gui.java
 *
 * Created on 30.11.2010, 09:50:42
 */

/**
 *
 * @author m
 */
public class Gui extends javax.swing.JFrame {

    //Variablen Zeitraumübersicht
    protected Terminsatz gts;   //Terminsatz beinhaltet alle Terminobjekte
    protected Terminsatz gtsk;  //Terminsatz beinhaltet alle Konfliktterminobjekte
    protected Terminsatz gtsz;  //Terminsatz für die Zeitraumübersich(benötigt um zB Suchtreffer anzuzeigen)
    protected Terminsatz gtszk; //Terminsatz Konflikte für die Zeitraumübersich

    protected Config config;

    Integer aktMonat = Integer.parseInt(new SimpleDateFormat("MM").format(new Date())); //um aktuellen Monatsnamen dick hervorzuheben
    Integer offsetMon = 0;
    Calendar c = Calendar.getInstance(Locale.GERMANY); //verbuggt, deswegen nochmal manuelle offset-berechnung
    int mc = 0; //monatscount
    Integer aktJahr = Integer.parseInt(new SimpleDateFormat("yyyy").format(new Date()));
    Integer lJahr = aktJahr - 1;
    Integer nJahr = aktJahr + 1;

    protected Boolean   bTagGeklickt = false;       //true wenn in Zeitraumübersicht ein Tag angeklickt wurde, somit dTagGeklickt gültig
    protected String    sTagGeklickt = "";          //temp.Var., für Transformation benötigt
    protected Date      dTagGeklickt = new Date();  //Datum des Tages der in der Zeitraumübersicht angeklickt wurde


    public static final int anzahl_zeilen = 95;
    public Calendar nextweek = new GregorianCalendar();


    //Ende Variablen Zeitraumübersicht

    GuiListener gi;



    // Heutiger Tag und die nächsten für Tabellen Header

    	Date[] datum = new Date[8];
    	Date now = new Date();
        Calendar calendar = new GregorianCalendar();

	DateFormat dateFormat = new SimpleDateFormat("EEE, dd.MM.yy",Locale.GERMANY);
	



    /** Creates new form Gui */
    public Gui(Terminsatz ts, Config cg) {
        super("Semesterplaner");
        gts = ts;
        gtsk = new Terminsatz();
        gtsk.tsAnlegen(gts.tKonfliktsuche());

        gtsz = gts;     //Zu Beginn in der Zeitraumübersicht alle Termine anzeigen
        gtszk = new Terminsatz();
        gtszk.tsAnlegen(gtsz.tKonfliktsuche());   //Zu Beginn in der Zeitraumübersicht alle Konflikte anzeigen

        config = cg;
        //1 Tag dazu
        calendar.setTime(now);
        datum[0] = calendar.getTime();
	for(int i = 1; i<=7; i++)
	{
		calendar.add(Calendar.DAY_OF_MONTH, 1);
		datum[i] = calendar.getTime();
        }

        initComponents();

        nextweek.setTimeInMillis(System.currentTimeMillis());
        //7 Tages übersicht zeichnen
        setWeek(nextweek);
        
   }

    /**
     * Zeichnet die Semesteruebesicht neu.
     */
    public void ges_tables_repaint()
    {
        jtApr.repaint();
        jtAug.repaint();
        jtDez.repaint();
        jtFeb.repaint();
        jtJan.repaint();
        jtJul.repaint();
        jtJun.repaint();
        jtMae.repaint();
        jtMai.repaint();
        jtNov.repaint();
        jtOkt.repaint();

        gtsk.clear();                //Konflikttermine aktualisieren
        gtsk.tsAnlegen(gts.tKonfliktsuche());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jSP_zeit = new javax.swing.JScrollPane();
        AttributiveCellTableModel ml_zeit = new AttributiveCellTableModel(anzahl_zeilen,1);
        ml_zeit.setDataVector(new Object [][] {
            {"00:00"},
            {"00:15"},
            {"00:30"},
            {"00:45"},
            {"01:00"},
            {"01:15"},
            {"01:30"},
            {"01:45"},
            {"02:00"},
            {"02:15"},
            {"02:30"},
            {"02:45"},
            {"03:00"},
            {"03:15"},
            {"03:30"},
            {"03:45"},
            {"04:00"},
            {"04:15"},
            {"04:30"},
            {"04:45"},
            {"05:00"},
            {"05:15"},
            {"05:30"},
            {"05:45"},
            {"06:00"},
            {"06:15"},
            {"06:30"},
            {"06:45"},
            {"07:00"},
            {"07:15"},
            {"07:30"},
            {"07:45"},
            {"08:00"},
            {"08:15"},
            {"08:30"},
            {"08:45"},
            {"09:00"},
            {"09:15"},
            {"09:30"},
            {"09:45"},
            {"10:00"},
            {"10:15"},
            {"10:30"},
            {"10:45"},
            {"11:00"},
            {"11:15"},
            {"11:30"},
            {"11:45"},
            {"12:00"},
            {"12:15"},
            {"12:30"},
            {"12:45"},
            {"13:00"},
            {"13:15"},
            {"13:30"},
            {"13:45"},
            {"14:00"},
            {"14:15"},
            {"14:30"},
            {"14:45"},
            {"15:00"},
            {"15:15"},
            {"15:30"},
            {"15:45"},
            {"16:00"},
            {"16:15"},
            {"16:30"},
            {"16:45"},
            {"17:00"},
            {"17:15"},
            {"17:30"},
            {"17:45"},
            {"18:00"},
            {"18:15"},
            {"18:30"},
            {"18:45"},
            {"19:00"},
            {"19:15"},
            {"19:30"},
            {"19:45"},
            {"20:00"},
            {"20:15"},
            {"20:30"},
            {"20:45"},
            {"21:00"},
            {"21:15"},
            {"21:30"},
            {"21:45"},
            {"22:00"},
            {"22:15"},
            {"22:30"},
            {"22:45"},
            {"23:00"},
            {"23:15"},
            {"23:30"},
            {"23:45"},
            {"24:00"},
        },
        new String [] {
            "Zeit"
        });
        jT_zeit = new semesterplaner.libs.SplitTable.MultiSpanCellTable(ml_zeit) { public boolean isCellEditable(int x, int y) {
            return false;
        }};
        jSP_tag01 = new javax.swing.JScrollPane();
        AttributiveCellTableModel ml_01 = new AttributiveCellTableModel(anzahl_zeilen,1);
        AttributiveCellTableModel ml_02 = new AttributiveCellTableModel(anzahl_zeilen,1);
        AttributiveCellTableModel ml_03 = new AttributiveCellTableModel(anzahl_zeilen,1);
        AttributiveCellTableModel ml_04 = new AttributiveCellTableModel(anzahl_zeilen,1);
        AttributiveCellTableModel ml_05 = new AttributiveCellTableModel(anzahl_zeilen,1);
        AttributiveCellTableModel ml_06 = new AttributiveCellTableModel(anzahl_zeilen,1);
        AttributiveCellTableModel ml_07 = new AttributiveCellTableModel(anzahl_zeilen,1);
        jT_tag01 = new semesterplaner.libs.SplitTable.MultiSpanCellTable(ml_01){ public boolean isCellEditable(int x, int y) {
            return false;
        }};
        jSP_tag02 = new javax.swing.JScrollPane();
        jT_tag02 = new semesterplaner.libs.SplitTable.MultiSpanCellTable(ml_02){ public boolean isCellEditable(int x, int y) {
            return false;
        }};
        jSP_tag03 = new javax.swing.JScrollPane();
        jT_tag03 = new semesterplaner.libs.SplitTable.MultiSpanCellTable(ml_03){ public boolean isCellEditable(int x, int y) {
            return false;
        }};
        jSP_tag04 = new javax.swing.JScrollPane();
        jT_tag04 = new semesterplaner.libs.SplitTable.MultiSpanCellTable(ml_04){ public boolean isCellEditable(int x, int y) {
            return false;
        }};
        jSP_tag05 = new javax.swing.JScrollPane();
        jT_tag05 = new semesterplaner.libs.SplitTable.MultiSpanCellTable(ml_05){ public boolean isCellEditable(int x, int y) {
            return false;
        }};
        jSP_tag06 = new javax.swing.JScrollPane();
        jT_tag06 = new semesterplaner.libs.SplitTable.MultiSpanCellTable(ml_06){ public boolean isCellEditable(int x, int y) {
            return false;
        }};
        jSP_tag07 = new javax.swing.JScrollPane();
        jT_tag07 = new semesterplaner.libs.SplitTable.MultiSpanCellTable(ml_07){ public boolean isCellEditable(int x, int y) {
            return false;
        }};
        nextWeek = new javax.swing.JButton();
        prevWeek = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        String wsbordername = "Wintersemester";
        if(aktMonat < 7) {
            wsbordername = "Wintersemester " + lJahr + "/" + aktJahr;
        } else {
            wsbordername = "Wintersemester " + aktJahr + "/" + nJahr;
        }
        pWs = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        c.set(c.YEAR, lJahr);
        c.set(c.MONTH, 8);  //September
        c.set(c.DAY_OF_MONTH, 1);
        offsetMon =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;
        mc = 2 - offsetMon;

        Integer[][]aSep = {     //Monatselemente
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                aSep[x][y] = mc++;
                if(aSep[x][y] < 1 || aSep[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) aSep[x][y] = null;
            }
        }
        jtSep = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        c.set(c.YEAR, lJahr);
        c.set(c.MONTH, 9);  //Oktober
        c.set(c.DAY_OF_MONTH, 1);
        offsetMon =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;
        mc = 2 - offsetMon;

        Integer[][]aOkt = {     //Monatselemente
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                aOkt[x][y] = mc++;
                if(aOkt[x][y] < 1 || aOkt[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) aOkt[x][y] = null;
            }
        }
        jtOkt = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        c.set(c.YEAR, lJahr);
        c.set(c.MONTH, 10);  //November
        c.set(c.DAY_OF_MONTH, 1);
        offsetMon =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;
        mc = 2 - offsetMon;

        Integer[][]aNov = {     //Monatselemente
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                aNov[x][y] = mc++;
                if(aNov[x][y] < 1 || aNov[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) aNov[x][y] = null;
            }
        }
        jtNov = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        c.set(c.YEAR, lJahr);
        c.set(c.MONTH, 11);  //Dezember
        c.set(c.DAY_OF_MONTH, 1);
        offsetMon =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;
        mc = 2 - offsetMon;

        Integer[][]aDez = {     //Monatselemente
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null},
            {null,null,null,null,null,null,null}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                aDez[x][y] = mc++;
                if(aDez[x][y] < 1 || aDez[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) aDez[x][y] = null;
            }
        }
        jtDez = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        c.set(c.YEAR, aktJahr);
        c.set(c.MONTH, 0);  //Januar
        c.set(c.DAY_OF_MONTH, 1);
        Integer offsetJan =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;

        mc = 2 - offsetJan;

        Integer[][]jan = {
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                if(jan[x][y] < 1 || jan[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) jan[x][y] = null;
            }
        }
        jtJan = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        c.set(c.YEAR, aktJahr);
        c.set(c.MONTH, 1);  //Februar
        c.set(c.DAY_OF_MONTH, 1);
        Integer offsetFeb =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;

        mc = 2 - offsetFeb;

        Integer[][]feb = {
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                if(feb[x][y] < 1 || feb[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) feb[x][y] = null;
            }
        }
        jtFeb = new javax.swing.JTable();
        jlSep = new javax.swing.JLabel();
        jlOkt = new javax.swing.JLabel();
        jlNov = new javax.swing.JLabel();
        jlDez = new javax.swing.JLabel();
        jlJan = new javax.swing.JLabel();
        jlFeb = new javax.swing.JLabel();
        String ssbordername = "Sommersemester";
        if(aktMonat < 7) {
            ssbordername = "Sommersemester " + aktJahr;
        } else {
            ssbordername = "Sommersemester " + nJahr;
        }
        pSs = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        c.set(c.YEAR, aktJahr);
        c.set(c.MONTH, 2);  //März
        c.set(c.DAY_OF_MONTH, 1);
        Integer offsetMae =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;

        mc = 2 - offsetMae;

        Integer[][]mae = {
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                if(mae[x][y] < 1 || mae[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) mae[x][y] = null;
            }
        }
        jtMae = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        c.set(c.YEAR, aktJahr);
        c.set(c.MONTH, 3);  //April
        c.set(c.DAY_OF_MONTH, 1);
        Integer offsetApr =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;

        mc = 2 - offsetApr;

        Integer[][]apr = {
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                if(apr[x][y] < 1 || apr[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) apr[x][y] = null;
            }
        }
        jtApr = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        c.set(c.YEAR, aktJahr);
        c.set(c.MONTH, 4);  //Mai
        c.set(c.DAY_OF_MONTH, 1);
        Integer offsetMai =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;

        mc = 2 - offsetMai;

        Integer[][]mai = {
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                if(mai[x][y] < 1 || mai[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) mai[x][y] = null;
            }
        }
        jtMai = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        c.set(c.YEAR, aktJahr);
        c.set(c.MONTH, 5);  //Juni
        c.set(c.DAY_OF_MONTH, 1);
        Integer offsetJun =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;

        mc = 2 - offsetJun;

        Integer[][]jun = {
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                if(jun[x][y] < 1 || jun[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) jun[x][y] = null;
            }
        }
        jtJun = new javax.swing.JTable();
        jScrollPane18 = new javax.swing.JScrollPane();
        c.set(c.YEAR, aktJahr);
        c.set(c.MONTH, 6);  //Juli
        c.set(c.DAY_OF_MONTH, 1);
        Integer offsetJul =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;

        mc = 2 - offsetJul;

        Integer[][]jul = {
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                if(jul[x][y] < 1 || jul[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) jul[x][y] = null;
            }
        }
        jtJul = new javax.swing.JTable();
        jScrollPane19 = new javax.swing.JScrollPane();
        c.set(c.YEAR, aktJahr);
        c.set(c.MONTH, 7);  //August
        c.set(c.DAY_OF_MONTH, 1);
        Integer offsetAug =  ((7 + c.get(c.DAY_OF_WEEK) - c.MONDAY) % 7)+1;

        mc = 2 - offsetAug;

        Integer[][]aug = {
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++},
            {mc++ ,mc++,mc++,mc++,mc++,mc++,mc++}
        };

        for(int x = 0;x < 6; x++) {
            for(int y = 0;y < 7; y++) {
                if(aug[x][y] < 1 || aug[x][y] > c.getActualMaximum(c.DAY_OF_MONTH)) aug[x][y] = null;
            }
        }
        jtAug = new javax.swing.JTable();
        jlMae = new javax.swing.JLabel();
        jlApr = new javax.swing.JLabel();
        jlMai = new javax.swing.JLabel();
        jlJun = new javax.swing.JLabel();
        jlJul = new javax.swing.JLabel();
        jlAug = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jbDmOk = new javax.swing.JButton();
        jpTerminattribute = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfDmBez = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcbDmSttTag = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jcbDmSttMon = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jcbDmSttStd = new javax.swing.JComboBox();
        jcbDmSttJahr = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jcbDmSttMin = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jcbDmSttSek = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jcbDmStpTag = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jcbDmStpMon = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jcbDmStpJahr = new javax.swing.JComboBox();
        jcbDmStpStd = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        jcbDmStpMin = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        jcbDmStpSek = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        jtfDmOrt = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jtfDmTyp = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jcbDmPrio = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtaDmBem = new javax.swing.JTextArea();
        jftfDmVbz = new javax.swing.JFormattedTextField();
        jftfDmNbz = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        start_date_ch = new javax.swing.JCheckBox();
        ende_date_ch = new javax.swing.JCheckBox();
        jpTerminoptionen = new javax.swing.JPanel();
        jrbDmSuchen = new javax.swing.JRadioButton();
        jrbDmAnlegen = new javax.swing.JRadioButton();
        jrbDmLoeschen = new javax.swing.JRadioButton();
        jrbDmExportieren = new javax.swing.JRadioButton();
        jPGesamtzeit = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTGesammtzeit = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnICSPath = new javax.swing.JButton();
        btnSavePath = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jbNextArch = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel32 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jbLoadConfig = new javax.swing.JButton();
        jbLoadDefault = new javax.swing.JButton();
        jbSaveConfig = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        termineImport = new javax.swing.JMenuItem();
        termineArchi = new javax.swing.JMenuItem();
        termiCalExp = new javax.swing.JMenuItem();
        termine_htwm = new javax.swing.JMenuItem();
        if (Config.DEBUG)
        tsatz_ausgeben = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Semesterplaner v.0.1");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        //jTabbedPane1.addTab("nächste 7 Tage", component);
        //jTabbedPane1.addTab("Zeitraum", component);
        //jTabbedPane1.addTab("Maske", component);
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTabbedPane1MousePressed(evt);
            }
        });

        jSP_zeit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jT_zeit.getTableHeader().setReorderingAllowed(false);
        jSP_zeit.setViewportView(jT_zeit);
        //jT_zeit.changeSelection(jT_tag01.getSelectedRow(), 1, false, false);

        jSP_tag01.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jT_tag01.setDefaultRenderer(Object.class, new AttributiveCellRenderer());
        jT_tag01.getTableHeader().setReorderingAllowed(false);
        jT_tag01.getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[0]));
        jT_tag01.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_tag01MouseClicked(evt);
            }
        });
        jT_tag01.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jT_tag01MouseMoved(evt);
            }
        });
        jSP_tag01.setViewportView(jT_tag01);

        jSP_tag02.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jT_tag02.setDefaultRenderer(Object.class, new AttributiveCellRenderer());
        jT_tag02.getTableHeader().setReorderingAllowed(false);
        jT_tag02.getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[1]));
        jT_tag02.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jT_tag02MousePressed(evt);
            }
        });
        jT_tag02.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jT_tag02MouseMoved(evt);
            }
        });
        jT_tag02.repaint();
        jSP_tag02.setViewportView(jT_tag02);

        jSP_tag03.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jT_tag03.setDefaultRenderer(Object.class, new AttributiveCellRenderer());
        jT_tag03.getTableHeader().setReorderingAllowed(false);
        jT_tag03.getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[2]));
        jT_tag03.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_tag03MouseClicked(evt);
            }
        });
        jT_tag03.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jT_tag03MouseMoved(evt);
            }
        });
        jSP_tag03.setViewportView(jT_tag03);

        jSP_tag04.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jT_tag04.setDefaultRenderer(Object.class, new AttributiveCellRenderer());
        jT_tag04.getTableHeader().setReorderingAllowed(false);
        jT_tag04.getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[3]));
        jT_tag04.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_tag04MouseClicked(evt);
            }
        });
        jT_tag04.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jT_tag04MouseMoved(evt);
            }
        });
        jSP_tag04.setViewportView(jT_tag04);

        jSP_tag05.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jT_tag05.setDefaultRenderer(Object.class, new AttributiveCellRenderer());
        jT_tag05.getTableHeader().setReorderingAllowed(false);
        jT_tag05.getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[4]));
        jT_tag05.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_tag05MouseClicked(evt);
            }
        });
        jT_tag05.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jT_tag05MouseMoved(evt);
            }
        });
        jSP_tag05.setViewportView(jT_tag05);

        jSP_tag06.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jT_tag06.setDefaultRenderer(Object.class, new AttributiveCellRenderer());
        jT_tag06.getTableHeader().setReorderingAllowed(false);
        jT_tag06.getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[5]));
        jT_tag06.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_tag06MouseClicked(evt);
            }
        });
        jT_tag06.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jT_tag06MouseMoved(evt);
            }
        });
        jSP_tag06.setViewportView(jT_tag06);

        jSP_tag07.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jT_tag07.setDefaultRenderer(Object.class, new AttributiveCellRenderer());
        jT_tag07.getTableHeader().setReorderingAllowed(false);
        jT_tag07.getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[6]));
        jT_tag07.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_tag07MouseClicked(evt);
            }
        });
        jT_tag07.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jT_tag07MouseMoved(evt);
            }
        });
        jSP_tag07.setViewportView(jT_tag07);

        nextWeek.setText("nächste Woche >>");

        prevWeek.setText("<< vorherige Woche");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSP_zeit, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(prevWeek)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextWeek))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSP_tag01, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSP_tag02, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSP_tag03, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSP_tag04, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSP_tag05, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSP_tag06, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSP_tag07, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSP_tag07, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addComponent(jSP_tag06, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addComponent(jSP_tag05, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addComponent(jSP_tag04, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addComponent(jSP_tag03, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addComponent(jSP_tag02, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addComponent(jSP_tag01, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addComponent(jSP_zeit, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevWeek)
                    .addComponent(nextWeek))
                .addGap(42, 42, 42))
        );

        //Scrollpanes miteinander verknuepfen

        jSP_zeit.getVerticalScrollBar().setModel(jSP_tag01.getVerticalScrollBar().getModel());
        jSP_zeit.getVerticalScrollBar().setModel(jSP_tag02.getVerticalScrollBar().getModel());
        jSP_zeit.getVerticalScrollBar().setModel(jSP_tag03.getVerticalScrollBar().getModel());
        jSP_zeit.getVerticalScrollBar().setModel(jSP_tag04.getVerticalScrollBar().getModel());
        jSP_zeit.getVerticalScrollBar().setModel(jSP_tag05.getVerticalScrollBar().getModel());
        jSP_zeit.getVerticalScrollBar().setModel(jSP_tag06.getVerticalScrollBar().getModel());
        jSP_zeit.getVerticalScrollBar().setModel(jSP_tag07.getVerticalScrollBar().getModel());
        jSP_tag01.getVerticalScrollBar().setModel(jSP_tag02.getVerticalScrollBar().getModel());
        jSP_tag01.getVerticalScrollBar().setModel(jSP_tag03.getVerticalScrollBar().getModel());
        jSP_tag01.getVerticalScrollBar().setModel(jSP_tag04.getVerticalScrollBar().getModel());
        jSP_tag01.getVerticalScrollBar().setModel(jSP_tag05.getVerticalScrollBar().getModel());
        jSP_tag01.getVerticalScrollBar().setModel(jSP_tag06.getVerticalScrollBar().getModel());
        jSP_tag01.getVerticalScrollBar().setModel(jSP_tag07.getVerticalScrollBar().getModel());
        jSP_tag02.getVerticalScrollBar().setModel(jSP_tag03.getVerticalScrollBar().getModel());
        jSP_tag02.getVerticalScrollBar().setModel(jSP_tag04.getVerticalScrollBar().getModel());
        jSP_tag02.getVerticalScrollBar().setModel(jSP_tag05.getVerticalScrollBar().getModel());
        jSP_tag02.getVerticalScrollBar().setModel(jSP_tag06.getVerticalScrollBar().getModel());
        jSP_tag02.getVerticalScrollBar().setModel(jSP_tag07.getVerticalScrollBar().getModel());
        jSP_tag03.getVerticalScrollBar().setModel(jSP_tag04.getVerticalScrollBar().getModel());
        jSP_tag03.getVerticalScrollBar().setModel(jSP_tag05.getVerticalScrollBar().getModel());
        jSP_tag03.getVerticalScrollBar().setModel(jSP_tag06.getVerticalScrollBar().getModel());
        jSP_tag03.getVerticalScrollBar().setModel(jSP_tag07.getVerticalScrollBar().getModel());
        jSP_tag04.getVerticalScrollBar().setModel(jSP_tag05.getVerticalScrollBar().getModel());
        jSP_tag04.getVerticalScrollBar().setModel(jSP_tag06.getVerticalScrollBar().getModel());
        jSP_tag04.getVerticalScrollBar().setModel(jSP_tag07.getVerticalScrollBar().getModel());
        jSP_tag05.getVerticalScrollBar().setModel(jSP_tag06.getVerticalScrollBar().getModel());
        jSP_tag05.getVerticalScrollBar().setModel(jSP_tag07.getVerticalScrollBar().getModel());
        jSP_tag06.getVerticalScrollBar().setModel(jSP_tag07.getVerticalScrollBar().getModel());

        jSP_zeit.getViewport().setViewPosition(new java.awt.Point(0,510));

        jTabbedPane1.addTab("nächste 7 Tage", jPanel1);

        pWs.setBorder(javax.swing.BorderFactory.createTitledBorder(wsbordername));

        jtSep.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {aSep[0][0],aSep[0][1],aSep[0][2],aSep[0][3],aSep[0][4],aSep[0][5],aSep[0][6]},
                {aSep[1][0],aSep[1][1],aSep[1][2],aSep[1][3],aSep[1][4],aSep[1][5],aSep[1][6]},
                {aSep[2][0],aSep[2][1],aSep[2][2],aSep[2][3],aSep[2][4],aSep[2][5],aSep[2][6]},
                {aSep[3][0],aSep[3][1],aSep[3][2],aSep[3][3],aSep[3][4],aSep[3][5],aSep[3][6]},
                {aSep[4][0],aSep[4][1],aSep[4][2],aSep[4][3],aSep[4][4],aSep[4][5],aSep[4][6]},
                {aSep[5][0],aSep[5][1],aSep[5][2],aSep[5][3],aSep[5][4],aSep[5][5],aSep[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtSep.setName("9." + lJahr);
        TableCellRenderer rendererSep = new CustomCellRenderer(gtsz, gtszk);
        jtSep.setDefaultRenderer(Object.class, rendererSep);
        jtSep.getTableHeader().setResizingAllowed(false);
        jtSep.getTableHeader().setReorderingAllowed(false);
        jtSep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtSepMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtSepMousePressed(evt);
            }
        });
        //jtSep.setEnabled(false);    //nicht editierbar machen
        jScrollPane2.setViewportView(jtSep);

        jtOkt.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {aOkt[0][0],aOkt[0][1],aOkt[0][2],aOkt[0][3],aOkt[0][4],aOkt[0][5],aOkt[0][6]},
                {aOkt[1][0],aOkt[1][1],aOkt[1][2],aOkt[1][3],aOkt[1][4],aOkt[1][5],aOkt[1][6]},
                {aOkt[2][0],aOkt[2][1],aOkt[2][2],aOkt[2][3],aOkt[2][4],aOkt[2][5],aOkt[2][6]},
                {aOkt[3][0],aOkt[3][1],aOkt[3][2],aOkt[3][3],aOkt[3][4],aOkt[3][5],aOkt[3][6]},
                {aOkt[4][0],aOkt[4][1],aOkt[4][2],aOkt[4][3],aOkt[4][4],aOkt[4][5],aOkt[4][6]},
                {aOkt[5][0],aOkt[5][1],aOkt[5][2],aOkt[5][3],aOkt[5][4],aOkt[5][5],aOkt[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtOkt.setName("10."+lJahr);
        TableCellRenderer rendererOkt = new CustomCellRenderer(gtsz, gtszk);
        jtOkt.setDefaultRenderer(Object.class, rendererOkt);
        jtOkt.getTableHeader().setResizingAllowed(false);
        jtOkt.getTableHeader().setReorderingAllowed(false);
        jtOkt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtOktMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtOktMousePressed(evt);
            }
        });
        jScrollPane9.setViewportView(jtOkt);

        jtNov.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {aNov[0][0],aNov[0][1],aNov[0][2],aNov[0][3],aNov[0][4],aNov[0][5],aNov[0][6]},
                {aNov[1][0],aNov[1][1],aNov[1][2],aNov[1][3],aNov[1][4],aNov[1][5],aNov[1][6]},
                {aNov[2][0],aNov[2][1],aNov[2][2],aNov[2][3],aNov[2][4],aNov[2][5],aNov[2][6]},
                {aNov[3][0],aNov[3][1],aNov[3][2],aNov[3][3],aNov[3][4],aNov[3][5],aNov[3][6]},
                {aNov[4][0],aNov[4][1],aNov[4][2],aNov[4][3],aNov[4][4],aNov[4][5],aNov[4][6]},
                {aNov[5][0],aNov[5][1],aNov[5][2],aNov[5][3],aNov[5][4],aNov[5][5],aNov[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtNov.setName("11."+lJahr);
        TableCellRenderer rendererNov = new CustomCellRenderer(gtsz, gtszk);
        jtNov.setDefaultRenderer(Object.class, rendererNov);
        jtNov.getTableHeader().setResizingAllowed(false);
        jtNov.getTableHeader().setReorderingAllowed(false);
        jtNov.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtNovMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtNovMousePressed(evt);
            }
        });
        jScrollPane10.setViewportView(jtNov);

        jtDez.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {aDez[0][0],aDez[0][1],aDez[0][2],aDez[0][3],aDez[0][4],aDez[0][5],aDez[0][6]},
                {aDez[1][0],aDez[1][1],aDez[1][2],aDez[1][3],aDez[1][4],aDez[1][5],aDez[1][6]},
                {aDez[2][0],aDez[2][1],aDez[2][2],aDez[2][3],aDez[2][4],aDez[2][5],aDez[2][6]},
                {aDez[3][0],aDez[3][1],aDez[3][2],aDez[3][3],aDez[3][4],aDez[3][5],aDez[3][6]},
                {aDez[4][0],aDez[4][1],aDez[4][2],aDez[4][3],aDez[4][4],aDez[4][5],aDez[4][6]},
                {aDez[5][0],aDez[5][1],aDez[5][2],aDez[5][3],aDez[5][4],aDez[5][5],aDez[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtDez.setName("12."+lJahr);
        TableCellRenderer rendererDez = new CustomCellRenderer(gtsz, gtszk);
        jtDez.setDefaultRenderer(Object.class, rendererDez);
        jtDez.getTableHeader().setResizingAllowed(false);
        jtDez.getTableHeader().setReorderingAllowed(false);
        jtDez.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtDezMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtDezMousePressed(evt);
            }
        });
        jScrollPane11.setViewportView(jtDez);

        jtJan.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {jan[0][0],jan[0][1],jan[0][2],jan[0][3],jan[0][4],jan[0][5],jan[0][6]},
                {jan[1][0],jan[1][1],jan[1][2],jan[1][3],jan[1][4],jan[1][5],jan[1][6]},
                {jan[2][0],jan[2][1],jan[2][2],jan[2][3],jan[2][4],jan[2][5],jan[2][6]},
                {jan[3][0],jan[3][1],jan[3][2],jan[3][3],jan[3][4],jan[3][5],jan[3][6]},
                {jan[4][0],jan[4][1],jan[4][2],jan[4][3],jan[4][4],jan[4][5],jan[4][6]},
                {jan[5][0],jan[5][1],jan[5][2],jan[5][3],jan[5][4],jan[5][5],jan[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtJan.setName("1." + aktJahr);
        TableCellRenderer rendererJan = new CustomCellRenderer(gtsz, gtszk);
        jtJan.setDefaultRenderer(Object.class, rendererJan);
        jtJan.getTableHeader().setResizingAllowed(false);
        jtJan.getTableHeader().setReorderingAllowed(false);
        jtJan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtJanMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtJanMousePressed(evt);
            }
        });
        jScrollPane12.setViewportView(jtJan);

        jtFeb.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {feb[0][0],feb[0][1],feb[0][2],feb[0][3],feb[0][4],feb[0][5],feb[0][6]},
                {feb[1][0],feb[1][1],feb[1][2],feb[1][3],feb[1][4],feb[1][5],feb[1][6]},
                {feb[2][0],feb[2][1],feb[2][2],feb[2][3],feb[2][4],feb[2][5],feb[2][6]},
                {feb[3][0],feb[3][1],feb[3][2],feb[3][3],feb[3][4],feb[3][5],feb[3][6]},
                {feb[4][0],feb[4][1],feb[4][2],feb[4][3],feb[4][4],feb[4][5],feb[4][6]},
                {feb[5][0],feb[5][1],feb[5][2],feb[5][3],feb[5][4],feb[5][5],feb[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtFeb.setName("2."+aktJahr);
        TableCellRenderer rendererFeb = new CustomCellRenderer(gtsz, gtszk);
        jtFeb.setDefaultRenderer(Object.class, rendererFeb);
        jtFeb.getTableHeader().setResizingAllowed(false);
        jtFeb.getTableHeader().setReorderingAllowed(false);
        jtFeb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtFebMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtFebMousePressed(evt);
            }
        });
        jScrollPane13.setViewportView(jtFeb);

        if(aktMonat == 9) jlSep.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlSep.setText("September " + lJahr.toString());

        if(aktMonat == 10) jlOkt.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlOkt.setText("Oktober "  + lJahr.toString());

        if(aktMonat == 11) jlNov.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlNov.setText("November " + lJahr.toString());

        if(aktMonat == 12) jlDez.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlDez.setText("Dezember " + lJahr.toString());

        if(aktMonat == 1) jlJan.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlJan.setText("Januar " + aktJahr.toString());

        if(aktMonat == 2) jlFeb.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlFeb.setText("Februar " + aktJahr.toString());

        javax.swing.GroupLayout pWsLayout = new javax.swing.GroupLayout(pWs);
        pWs.setLayout(pWsLayout);
        pWsLayout.setHorizontalGroup(
            pWsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pWsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pWsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlSep))
                .addGap(18, 18, 18)
                .addGroup(pWsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlOkt))
                .addGap(18, 18, 18)
                .addGroup(pWsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlNov))
                .addGap(18, 18, 18)
                .addGroup(pWsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlDez))
                .addGap(18, 18, 18)
                .addGroup(pWsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlJan))
                .addGap(18, 18, 18)
                .addGroup(pWsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlFeb)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        pWsLayout.setVerticalGroup(
            pWsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pWsLayout.createSequentialGroup()
                .addGroup(pWsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlSep)
                    .addComponent(jlOkt)
                    .addComponent(jlNov)
                    .addComponent(jlDez)
                    .addComponent(jlJan)
                    .addComponent(jlFeb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pWsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pSs.setBorder(javax.swing.BorderFactory.createTitledBorder(ssbordername));

        jtMae.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {mae[0][0],mae[0][1],mae[0][2],mae[0][3],mae[0][4],mae[0][5],mae[0][6]},
                {mae[1][0],mae[1][1],mae[1][2],mae[1][3],mae[1][4],mae[1][5],mae[1][6]},
                {mae[2][0],mae[2][1],mae[2][2],mae[2][3],mae[2][4],mae[2][5],mae[2][6]},
                {mae[3][0],mae[3][1],mae[3][2],mae[3][3],mae[3][4],mae[3][5],mae[3][6]},
                {mae[4][0],mae[4][1],mae[4][2],mae[4][3],mae[4][4],mae[4][5],mae[4][6]},
                {mae[5][0],mae[5][1],mae[5][2],mae[5][3],mae[5][4],mae[5][5],mae[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtMae.setName("3."+aktJahr);
        TableCellRenderer rendererMae = new CustomCellRenderer(gtsz, gtszk);
        jtMae.setDefaultRenderer(Object.class, rendererMae);
        jtMae.getTableHeader().setResizingAllowed(false);
        jtMae.getTableHeader().setReorderingAllowed(false);
        jtMae.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtMaeMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtMaeMousePressed(evt);
            }
        });
        jScrollPane14.setViewportView(jtMae);

        jtApr.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {apr[0][0],apr[0][1],apr[0][2],apr[0][3],apr[0][4],apr[0][5],apr[0][6]},
                {apr[1][0],apr[1][1],apr[1][2],apr[1][3],apr[1][4],apr[1][5],apr[1][6]},
                {apr[2][0],apr[2][1],apr[2][2],apr[2][3],apr[2][4],apr[2][5],apr[2][6]},
                {apr[3][0],apr[3][1],apr[3][2],apr[3][3],apr[3][4],apr[3][5],apr[3][6]},
                {apr[4][0],apr[4][1],apr[4][2],apr[4][3],apr[4][4],apr[4][5],apr[4][6]},
                {apr[5][0],apr[5][1],apr[5][2],apr[5][3],apr[5][4],apr[5][5],apr[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtApr.setName("4."+aktJahr);
        TableCellRenderer rendererApr = new CustomCellRenderer(gtsz, gtszk);
        jtApr.setDefaultRenderer(Object.class, rendererApr);
        jtApr.getTableHeader().setResizingAllowed(false);
        jtApr.getTableHeader().setReorderingAllowed(false);
        jtApr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtAprMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtAprMousePressed(evt);
            }
        });
        jScrollPane15.setViewportView(jtApr);

        jtMai.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {mai[0][0],mai[0][1],mai[0][2],mai[0][3],mai[0][4],mai[0][5],mai[0][6]},
                {mai[1][0],mai[1][1],mai[1][2],mai[1][3],mai[1][4],mai[1][5],mai[1][6]},
                {mai[2][0],mai[2][1],mai[2][2],mai[2][3],mai[2][4],mai[2][5],mai[2][6]},
                {mai[3][0],mai[3][1],mai[3][2],mai[3][3],mai[3][4],mai[3][5],mai[3][6]},
                {mai[4][0],mai[4][1],mai[4][2],mai[4][3],mai[4][4],mai[4][5],mai[4][6]},
                {mai[5][0],mai[5][1],mai[5][2],mai[5][3],mai[5][4],mai[5][5],mai[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtMai.setName("5."+aktJahr);
        TableCellRenderer rendererMai = new CustomCellRenderer(gtsz, gtszk);
        jtMai.setDefaultRenderer(Object.class, rendererMai);
        jtMai.getTableHeader().setResizingAllowed(false);
        jtMai.getTableHeader().setReorderingAllowed(false);
        jtMai.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtMaiMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtMaiMousePressed(evt);
            }
        });
        jScrollPane16.setViewportView(jtMai);

        jtJun.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {jun[0][0],jun[0][1],jun[0][2],jun[0][3],jun[0][4],jun[0][5],jun[0][6]},
                {jun[1][0],jun[1][1],jun[1][2],jun[1][3],jun[1][4],jun[1][5],jun[1][6]},
                {jun[2][0],jun[2][1],jun[2][2],jun[2][3],jun[2][4],jun[2][5],jun[2][6]},
                {jun[3][0],jun[3][1],jun[3][2],jun[3][3],jun[3][4],jun[3][5],jun[3][6]},
                {jun[4][0],jun[4][1],jun[4][2],jun[4][3],jun[4][4],jun[4][5],jun[4][6]},
                {jun[5][0],jun[5][1],jun[5][2],jun[5][3],jun[5][4],jun[5][5],jun[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtJun.setName("6."+aktJahr);
        TableCellRenderer rendererJun = new CustomCellRenderer(gtsz, gtszk);
        jtJun.setDefaultRenderer(Object.class, rendererJun);
        jtJun.getTableHeader().setResizingAllowed(false);
        jtJun.getTableHeader().setReorderingAllowed(false);
        jtJun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtJunMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtJunMousePressed(evt);
            }
        });
        jScrollPane17.setViewportView(jtJun);

        jtJul.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {jul[0][0],jul[0][1],jul[0][2],jul[0][3],jul[0][4],jul[0][5],jul[0][6]},
                {jul[1][0],jul[1][1],jul[1][2],jul[1][3],jul[1][4],jul[1][5],jul[1][6]},
                {jul[2][0],jul[2][1],jul[2][2],jul[2][3],jul[2][4],jul[2][5],jul[2][6]},
                {jul[3][0],jul[3][1],jul[3][2],jul[3][3],jul[3][4],jul[3][5],jul[3][6]},
                {jul[4][0],jul[4][1],jul[4][2],jul[4][3],jul[4][4],jul[4][5],jul[4][6]},
                {jul[5][0],jul[5][1],jul[5][2],jul[5][3],jul[5][4],jul[5][5],jul[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtJul.setName("7."+aktJahr);
        TableCellRenderer rendererJul = new CustomCellRenderer(gtsz, gtszk);
        jtJul.setDefaultRenderer(Object.class, rendererJul);
        jtJul.getTableHeader().setResizingAllowed(false);
        jtJul.getTableHeader().setReorderingAllowed(false);
        jtJul.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtJulMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtJulMousePressed(evt);
            }
        });
        jScrollPane18.setViewportView(jtJul);

        jtAug.setModel(new javax.swing.table.DefaultTableModel(
            new Integer [][] {
                {aug[0][0],aug[0][1],aug[0][2],aug[0][3],aug[0][4],aug[0][5],aug[0][6]},
                {aug[1][0],aug[1][1],aug[1][2],aug[1][3],aug[1][4],aug[1][5],aug[1][6]},
                {aug[2][0],aug[2][1],aug[2][2],aug[2][3],aug[2][4],aug[2][5],aug[2][6]},
                {aug[3][0],aug[3][1],aug[3][2],aug[3][3],aug[3][4],aug[3][5],aug[3][6]},
                {aug[4][0],aug[4][1],aug[4][2],aug[4][3],aug[4][4],aug[4][5],aug[4][6]},
                {aug[5][0],aug[5][1],aug[5][2],aug[5][3],aug[5][4],aug[5][5],aug[5][6]},
            },
            new String [] {
                "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"
            }
        ));
        jtAug.setName("8."+aktJahr);
        TableCellRenderer rendererAug = new CustomCellRenderer(gtsz, gtszk);
        jtAug.setDefaultRenderer(Object.class, rendererAug);
        jtAug.getTableHeader().setResizingAllowed(false);
        jtAug.getTableHeader().setReorderingAllowed(false);
        jtAug.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtAugMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtAugMousePressed(evt);
            }
        });
        jScrollPane19.setViewportView(jtAug);

        if(aktMonat == 3) jlMae.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlMae.setText("März " + aktJahr.toString());

        if(aktMonat == 4) jlApr.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlApr.setText("April " + aktJahr.toString());

        if(aktMonat == 5) jlMai.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlMai.setText("Mai " + aktJahr.toString());

        if(aktMonat == 6) jlJun.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlJun.setText("Juni " + aktJahr.toString());

        if(aktMonat == 7) jlJul.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlJul.setText("Juli " + aktJahr.toString());

        if(aktMonat == 8) jlAug.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlAug.setText("August " + aktJahr.toString());

        javax.swing.GroupLayout pSsLayout = new javax.swing.GroupLayout(pSs);
        pSs.setLayout(pSsLayout);
        pSsLayout.setHorizontalGroup(
            pSsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pSsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pSsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlMae))
                .addGap(18, 18, 18)
                .addGroup(pSsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlApr))
                .addGap(18, 18, 18)
                .addGroup(pSsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlMai))
                .addGap(18, 18, 18)
                .addGroup(pSsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlJun))
                .addGap(18, 18, 18)
                .addGroup(pSsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlJul))
                .addGap(18, 18, 18)
                .addGroup(pSsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlAug)
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        pSsLayout.setVerticalGroup(
            pSsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pSsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pSsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlMae)
                    .addComponent(jlApr)
                    .addComponent(jlMai)
                    .addComponent(jlJun)
                    .addComponent(jlJul)
                    .addComponent(jlAug))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pSsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jButton2.setText("Zeitraum aktualisieren");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.setVisible(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pWs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pSs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pWs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pSs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(306, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Semesterübersicht", jPanel2);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Datenmaske"));

        jbDmOk.setText("OK");
        jbDmOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDmOkActionPerformed(evt);
            }
        });

        jpTerminattribute.setBorder(javax.swing.BorderFactory.createTitledBorder("Terminattribute"));

        jLabel1.setText("Bezeichnung:");

        jLabel2.setText("Tag");

        jLabel3.setText("Beginnt:");

        jcbDmSttTag.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jLabel4.setText(".");

        jcbDmSttMon.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jLabel5.setText("Monat");

        jLabel6.setText(".");

        jLabel7.setText("Jahr");

        jcbDmSttStd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        jcbDmSttJahr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1970", "1971", "1972", "1973", "1974", "1975", "1976", "1977", "1978", "1979", "1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", "", "" }));
        jcbDmSttJahr.setSelectedItem(aktJahr.toString());

        jLabel8.setText("Std");

        jLabel9.setText(":");

        jcbDmSttMin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        jLabel10.setText("Min");

        jLabel11.setText(":");

        jcbDmSttSek.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        jLabel12.setText("Sek");

        jLabel13.setText("Endet:");

        jcbDmStpTag.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", " " }));

        jLabel14.setText(".");

        jcbDmStpMon.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", " " }));

        jLabel15.setText(".");

        jcbDmStpJahr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1970", "1971", "1972", "1973", "1974", "1975", "1976", "1977", "1978", "1979", "1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", " ", " " }));
        jcbDmStpJahr.setSelectedItem(aktJahr.toString());

        jcbDmStpStd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        jLabel16.setText(":");

        jcbDmStpMin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        jLabel17.setText(":");

        jcbDmStpSek.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        jLabel18.setText("Ort:");

        jLabel19.setText("Vorber.zeit:");

        jLabel21.setText("Nachber.zeit:");

        jLabel23.setText("Termintyp:");

        jLabel24.setText("Priorität:");

        jcbDmPrio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5" }));

        jLabel25.setText("Bemerkungen:");

        jtaDmBem.setColumns(20);
        jtaDmBem.setRows(5);
        jScrollPane3.setViewportView(jtaDmBem);

        jftfDmVbz.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jftfDmNbz.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jLabel20.setText("[Minuten]");

        jLabel22.setText("[Minuten]");

        start_date_ch.setSelected(true);
        start_date_ch.setText("Ignorieren (für Suche)");

        ende_date_ch.setSelected(true);
        ende_date_ch.setText("Ignorieren (für Suche)");

        javax.swing.GroupLayout jpTerminattributeLayout = new javax.swing.GroupLayout(jpTerminattribute);
        jpTerminattribute.setLayout(jpTerminattributeLayout);
        jpTerminattributeLayout.setHorizontalGroup(
            jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTerminattributeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                    .addGroup(jpTerminattributeLayout.createSequentialGroup()
                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel13)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19)
                            .addComponent(jLabel21)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24))
                        .addGap(18, 18, 18)
                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfDmTyp, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                            .addComponent(jtfDmOrt, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                            .addComponent(jtfDmBez, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                            .addGroup(jpTerminattributeLayout.createSequentialGroup()
                                .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpTerminattributeLayout.createSequentialGroup()
                                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jpTerminattributeLayout.createSequentialGroup()
                                                .addComponent(jcbDmSttTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel4))
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jpTerminattributeLayout.createSequentialGroup()
                                                .addComponent(jcbDmSttMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel6))
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jcbDmSttJahr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jpTerminattributeLayout.createSequentialGroup()
                                        .addComponent(jcbDmStpTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbDmStpMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbDmStpJahr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpTerminattributeLayout.createSequentialGroup()
                                        .addComponent(jcbDmStpStd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbDmStpMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbDmStpSek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpTerminattributeLayout.createSequentialGroup()
                                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jpTerminattributeLayout.createSequentialGroup()
                                                .addComponent(jcbDmSttStd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel9))
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jpTerminattributeLayout.createSequentialGroup()
                                                .addComponent(jcbDmSttMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel11))
                                            .addComponent(jLabel10))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addComponent(jcbDmSttSek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jcbDmPrio, 0, 308, Short.MAX_VALUE)
                            .addComponent(jftfDmNbz, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                            .addComponent(jftfDmVbz, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ende_date_ch)
                            .addComponent(start_date_ch)
                            .addComponent(jLabel22)
                            .addComponent(jLabel20)))
                    .addComponent(jLabel25))
                .addContainerGap())
        );
        jpTerminattributeLayout.setVerticalGroup(
            jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTerminattributeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfDmBez, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpTerminattributeLayout.createSequentialGroup()
                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jcbDmSttTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jcbDmSttMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jcbDmSttJahr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jpTerminattributeLayout.createSequentialGroup()
                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcbDmSttStd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jcbDmSttMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jcbDmSttSek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(start_date_ch))))
                .addGap(18, 18, 18)
                .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jcbDmStpTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jcbDmStpMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jcbDmStpJahr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbDmStpStd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jcbDmStpMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(jcbDmStpSek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ende_date_ch))
                .addGap(18, 18, 18)
                .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jtfDmOrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jftfDmVbz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(18, 18, 18)
                .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jftfDmNbz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addGap(18, 18, 18)
                .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jtfDmTyp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpTerminattributeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jcbDmPrio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addContainerGap())
        );

        jpTerminoptionen.setBorder(javax.swing.BorderFactory.createTitledBorder("Terminoptionen"));

        buttonGroup1.add(jrbDmSuchen);
        jrbDmSuchen.setSelected(true);
        jrbDmSuchen.setText("suchen");

        buttonGroup1.add(jrbDmAnlegen);
        jrbDmAnlegen.setText("anlegen");

        buttonGroup1.add(jrbDmLoeschen);
        jrbDmLoeschen.setText("löschen");
        jrbDmLoeschen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbDmLoeschenActionPerformed(evt);
            }
        });

        buttonGroup1.add(jrbDmExportieren);
        jrbDmExportieren.setText("exportieren");

        javax.swing.GroupLayout jpTerminoptionenLayout = new javax.swing.GroupLayout(jpTerminoptionen);
        jpTerminoptionen.setLayout(jpTerminoptionenLayout);
        jpTerminoptionenLayout.setHorizontalGroup(
            jpTerminoptionenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTerminoptionenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTerminoptionenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbDmSuchen)
                    .addComponent(jrbDmAnlegen)
                    .addComponent(jrbDmLoeschen)
                    .addComponent(jrbDmExportieren))
                .addContainerGap(434, Short.MAX_VALUE))
        );
        jpTerminoptionenLayout.setVerticalGroup(
            jpTerminoptionenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTerminoptionenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jrbDmSuchen)
                .addGap(18, 18, 18)
                .addComponent(jrbDmAnlegen)
                .addGap(18, 18, 18)
                .addComponent(jrbDmLoeschen)
                .addGap(18, 18, 18)
                .addComponent(jrbDmExportieren)
                .addContainerGap(399, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpTerminattribute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbDmOk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpTerminoptionen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jpTerminattribute, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jpTerminoptionen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jbDmOk)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Datenmaske", jPanel3);

        jTGesammtzeit.setAutoCreateRowSorter(true);
        jTGesammtzeit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fach", "Gesamtzeit Vorlesung", "Vor- und Nachbereitungszeit", "Gesamtzeit"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTGesammtzeit);

        jButton1.setText("Berechne");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPGesamtzeitLayout = new javax.swing.GroupLayout(jPGesamtzeit);
        jPGesamtzeit.setLayout(jPGesamtzeitLayout);
        jPGesamtzeitLayout.setHorizontalGroup(
            jPGesamtzeitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPGesamtzeitLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 908, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(253, Short.MAX_VALUE))
        );
        jPGesamtzeitLayout.setVerticalGroup(
            jPGesamtzeitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPGesamtzeitLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPGesamtzeitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Gesamtzeiterfassung", jPGesamtzeit);

        btnICSPath.setText("ICS Pfad festlegen");
        btnICSPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnICSPathActionPerformed(evt);
            }
        });

        btnSavePath.setText("Save Pfad festlegen");
        btnSavePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePathActionPerformed(evt);
            }
        });

        jLabel26.setText("Speicherpfad ICalender");

        jLabel27.setText("Speicherpfad Savedatei:");

        jLabel28.setText("Datenherkunft:");

        jLabel29.setText("Seminargruppe");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel30.setText("nächste Archivierung");

        jFormattedTextField1.setToolTipText("Datumseingabe: YYYY.MM.DD");
        jFormattedTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextField1ActionPerformed(evt);
            }
        });

        jbNextArch.setText("automatisch berechnen");
        jbNextArch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNextArchActionPerformed(evt);
            }
        });

        jLabel31.setText("automatische Aktualisierung");

        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel32.setText("automatische Konfliktlösung");

        jbLoadConfig.setText("letzte Einstellungen laden");
        jbLoadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLoadConfigActionPerformed(evt);
            }
        });

        jbLoadDefault.setText("Standardeinstellungen laden");
        jbLoadDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLoadDefaultActionPerformed(evt);
            }
        });

        jbSaveConfig.setText("Änderungen speichern");
        jbSaveConfig.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbSaveConfigMouseClicked(evt);
            }
        });
        jbSaveConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addComponent(jLabel29)
                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31)
                            .addComponent(jLabel32)
                            .addComponent(jbLoadConfig))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox2)
                                    .addComponent(jCheckBox1)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jbLoadDefault)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jbSaveConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnSavePath, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnICSPath, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbNextArch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnICSPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSavePath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30)
                    .addComponent(jbNextArch))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(jCheckBox2))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbLoadConfig)
                    .addComponent(jbLoadDefault)
                    .addComponent(jbSaveConfig))
                .addContainerGap(399, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Konfiguration", jPanel5);

        jMenu1.setText("File");

        termineImport.setText("Termine Importieren...");
        jMenu1.add(termineImport);

        termineArchi.setText("Termine Archivieren....");
        jMenu1.add(termineArchi);

        termiCalExp.setText("Termine in iCalender exportieren...");
        jMenu1.add(termiCalExp);

        termine_htwm.setText("Termine von HTWM aktualisieren...");
        jMenu1.add(termine_htwm);

        if (Config.DEBUG)
        tsatz_ausgeben.setText("(DEBUG) Terminsatz ausgeben");
        if (Config.DEBUG)
        jMenu1.add(tsatz_ausgeben);

        jMenuItem1.setText("Beenden");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jCheckBoxMenuItem1.setText("Konfiguration");
        jMenu1.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jT_tag01MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag01MouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount()==2){

            Point p = evt.getPoint();
            int y = jT_tag01.rowAtPoint(p);
            int x = jT_tag01.columnAtPoint(p);
            
             if(jT_tag01.getValueAt(y, x) != null)
                {

            fuelleDm(new TerminTabelle((Termin) jT_tag01.getValueAt(y, x)));
        }}


    }//GEN-LAST:event_jT_tag01MouseClicked

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        ladeConfig();
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jtSepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtSepMouseClicked
    jTabbedPane1.setSelectedIndex(1);        // TODO add your handling code here:
    }//GEN-LAST:event_jtSepMouseClicked

    
    private void jbDmOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDmOkActionPerformed
        config.setDirty(true);
        if(jrbDmSuchen.isSelected()) {
            ges_tables_repaint();

        }
            

    }//GEN-LAST:event_jbDmOkActionPerformed

    private void jtSepMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtSepMousePressed
    jTabbedPane1.setSelectedIndex(1);        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_jtSepMousePressed

    private void jT_tag03MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag03MouseMoved
        // TODO add your handling code here:
                Point p = evt.getPoint();
                int y = jT_tag03.rowAtPoint(p);
                int x = jT_tag03.columnAtPoint(p);
                
                if(jT_tag03.getValueAt(y, x) != null)
                {
                    jT_tag03.setToolTipText(jT_tag03.getValueAt(y, x).toString());
                }
                
    }//GEN-LAST:event_jT_tag03MouseMoved

    private void jT_tag02MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag02MouseMoved
        // TODO add your handling code here:
                Point p = evt.getPoint();
                int y = jT_tag02.rowAtPoint(p);
                int x = jT_tag02.columnAtPoint(p);



                if(jT_tag02.getValueAt(y, x) != null)
                {
                    Termin a = (Termin) jT_tag02.getValueAt(y, x);
                    System.out.println("AAA:" + a);
                    jT_tag02.setToolTipText(jT_tag02.getValueAt(y, x).toString());
                }
    }//GEN-LAST:event_jT_tag02MouseMoved

    private void jT_tag01MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag01MouseMoved
        // TODO add your handling code here:
                Point p = evt.getPoint();
                int y = jT_tag01.rowAtPoint(p);
                int x = jT_tag01.columnAtPoint(p);

                if(jT_tag01.getValueAt(y, x) != null)
                {
                    jT_tag01.setToolTipText(jT_tag01.getValueAt(y, x).toString());
                }
    }//GEN-LAST:event_jT_tag01MouseMoved

    private void jT_tag04MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag04MouseMoved
        // TODO add your handling code here:
                Point p = evt.getPoint();
                int y = jT_tag04.rowAtPoint(p);
                int x = jT_tag04.columnAtPoint(p);

                if(jT_tag04.getValueAt(y, x) != null)
                {
                    jT_tag04.setToolTipText(jT_tag04.getValueAt(y, x).toString());
                }
    }//GEN-LAST:event_jT_tag04MouseMoved

    private void jT_tag05MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag05MouseMoved
        // TODO add your handling code here:
                Point p = evt.getPoint();
                int y = jT_tag05.rowAtPoint(p);
                int x = jT_tag05.columnAtPoint(p);

                if(jT_tag05.getValueAt(y, x) != null)
                {
                    jT_tag05.setToolTipText(jT_tag05.getValueAt(y, x).toString());
                }
    }//GEN-LAST:event_jT_tag05MouseMoved

    private void jT_tag06MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag06MouseMoved
        // TODO add your handling code here:
                Point p = evt.getPoint();
                int y = jT_tag06.rowAtPoint(p);
                int x = jT_tag06.columnAtPoint(p);

                if(jT_tag06.getValueAt(y, x) != null)
                {
                    jT_tag06.setToolTipText(jT_tag06.getValueAt(y, x).toString());
                }
    }//GEN-LAST:event_jT_tag06MouseMoved

    private void jT_tag07MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag07MouseMoved
        // TODO add your handling code here:
                Point p = evt.getPoint();
                int y = jT_tag07.rowAtPoint(p);
                int x = jT_tag07.columnAtPoint(p);

                if(jT_tag07.getValueAt(y, x) != null)
                {
                    jT_tag07.setToolTipText(jT_tag07.getValueAt(y, x).toString());
                }
    }//GEN-LAST:event_jT_tag07MouseMoved

    /**
     * Berechnet Gesamtzeit
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        ArrayList<ZeitObjekt> aZeitObjekt=new ArrayList();
        ZeitObjekt zZeitObjekt;
        ZeitObjekt hilfe;


        //System.out.println("Berechnen wurde gedrückt!");
        TreeSet<Termin> treeset = gts.gettsBez();
        Iterator itr = treeset.iterator();
        Termin tTemp;

        while(itr.hasNext()){
            tTemp=(Termin)itr.next();
            zZeitObjekt=new ZeitObjekt(tTemp.getBez(),tTemp.getStp().getTime()-tTemp.getStt().getTime(),tTemp.getVbz()+tTemp.getNbz());

            if(aZeitObjekt.isEmpty()){
                aZeitObjekt.add(zZeitObjekt);
                continue;
            }

                if (!(aZeitObjekt.get(aZeitObjekt.size() - 1).getBezeichner().equals(zZeitObjekt.getBezeichner()))){
                   aZeitObjekt.add(zZeitObjekt);
                }else{
                    hilfe=aZeitObjekt.get(aZeitObjekt.size() - 1);
                    hilfe.setVorlesungZeit(hilfe.getVorlesungZeit()+zZeitObjekt.getVorlesungZeit());
                    hilfe.setVorNachZeit(hilfe.getVorNachZeit()+zZeitObjekt.getVorNachZeit());
                    hilfe.setGesamtZeit(hilfe.getGesamtZeit()+zZeitObjekt.getGesamtZeit());
                 
                }
             
        }

        aZeitObjekt.trimToSize();

        System.out.println(aZeitObjekt.size());


        String sTabellenStrings[][]=new String[aZeitObjekt.size()][4];


        for (int i=0;i<=aZeitObjekt.size()-1;i++){
            System.out.println(aZeitObjekt.get(i).getVorlesungZeit());
            sTabellenStrings[i][0]=aZeitObjekt.get(i).getBezeichner();
            sTabellenStrings[i][1]=Double.toString((double)aZeitObjekt.get(i).getVorlesungZeit()/3600000)+" Stunden";
            sTabellenStrings[i][2]=Integer.toString(aZeitObjekt.get(i).getVorNachZeit())+" Minuten";
            sTabellenStrings[i][3]=Double.toString((double)aZeitObjekt.get(i).getGesamtZeit()/3600000)+" Stunden";
        }



        jTGesammtzeit.setModel(new javax.swing.table.DefaultTableModel(
                sTabellenStrings,
                new String [] {"Fach", "Gesamtzeit Vorlesung", "Vor- und Nachbereitungszeit", "Gesamtzeit"    }
                ) {
                    boolean[] canEdit = new boolean [] {
                    false, false, false, false
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                    }
                  });
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jtOktMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtOktMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtOktMouseClicked

    private void jtOktMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtOktMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtOktMousePressed

    private void jtNovMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtNovMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtNovMouseClicked

    private void jtNovMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtNovMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtNovMousePressed

    private void jtDezMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtDezMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtDezMouseClicked

    private void jtDezMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtDezMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtDezMousePressed

    private void jtJanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtJanMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtJanMouseClicked

    private void jtJanMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtJanMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtJanMousePressed

    private void jtFebMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtFebMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtFebMouseClicked

    private void jtFebMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtFebMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtFebMousePressed

    private void jtMaeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtMaeMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtMaeMouseClicked

    private void jtMaeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtMaeMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtMaeMousePressed

    private void jtAprMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAprMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtAprMouseClicked

    private void jtAprMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAprMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtAprMousePressed

    private void jtMaiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtMaiMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtMaiMouseClicked

    private void jtMaiMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtMaiMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtMaiMousePressed

    private void jtJunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtJunMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtJunMouseClicked

    private void jtJunMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtJunMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtJunMousePressed

    private void jtJulMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtJulMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtJulMouseClicked

    private void jtJulMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtJulMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtJulMousePressed

    private void jtAugMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAugMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtAugMouseClicked

    private void jtAugMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAugMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtAugMousePressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.closeSMPlaner();
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeSMPlaner();
    }//GEN-LAST:event_formWindowClosing

    private void jT_tag02MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag02MousePressed
        // TODO add your handling code here:
            if(evt.getClickCount()==2){

            Point p = evt.getPoint();
            int y = jT_tag02.rowAtPoint(p);
            int x = jT_tag02.columnAtPoint(p);

             if(jT_tag02.getValueAt(y, x) != null)
                {

                fuelleDm(new TerminTabelle((Termin) jT_tag02.getValueAt(y, x)));
        }}

    }//GEN-LAST:event_jT_tag02MousePressed

    private void jT_tag03MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag03MouseClicked
        // TODO add your handling code here:

            if(evt.getClickCount()==2){

            Point p = evt.getPoint();
            int y = jT_tag03.rowAtPoint(p);
            int x = jT_tag03.columnAtPoint(p);

             if(jT_tag03.getValueAt(y, x) != null)
                {


            fuelleDm(new TerminTabelle((Termin) jT_tag03.getValueAt(y, x)));
        }}
    }//GEN-LAST:event_jT_tag03MouseClicked

    private void jT_tag04MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag04MouseClicked
        // TODO add your handling code here:

            if(evt.getClickCount()==2){

            Point p = evt.getPoint();
            int y = jT_tag04.rowAtPoint(p);
            int x = jT_tag04.columnAtPoint(p);

             if(jT_tag04.getValueAt(y, x) != null)
                {
            fuelleDm(new TerminTabelle((Termin) jT_tag04.getValueAt(y, x)));
        }}
    }//GEN-LAST:event_jT_tag04MouseClicked

    private void jT_tag05MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag05MouseClicked
        // TODO add your handling code here:

            if(evt.getClickCount()==2){

            Point p = evt.getPoint();
            int y = jT_tag05.rowAtPoint(p);
            int x = jT_tag05.columnAtPoint(p);

             if(jT_tag05.getValueAt(y, x) != null)
                {
                fuelleDm(new TerminTabelle((Termin) jT_tag05.getValueAt(y, x)));
        }}
    }//GEN-LAST:event_jT_tag05MouseClicked

    private void jT_tag06MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag06MouseClicked
        // TODO add your handling code here:

            if(evt.getClickCount()==2){

            Point p = evt.getPoint();
            int y = jT_tag06.rowAtPoint(p);
            int x = jT_tag06.columnAtPoint(p);

             if(jT_tag06.getValueAt(y, x) != null)
                {

               fuelleDm(new TerminTabelle((Termin) jT_tag06.getValueAt(y, x)));

        }}
    }//GEN-LAST:event_jT_tag06MouseClicked

    private void jT_tag07MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tag07MouseClicked
        // TODO add your handling code here:

            if(evt.getClickCount()==2){

            Point p = evt.getPoint();
            int y = jT_tag07.rowAtPoint(p);
            int x = jT_tag07.columnAtPoint(p);

             if(jT_tag07.getValueAt(y, x) != null)
                {
        
                fuelleDm(new TerminTabelle((Termin) jT_tag07.getValueAt(y, x)));

            }
        }
    }//GEN-LAST:event_jT_tag07MouseClicked


    private void jTabbedPane1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MousePressed
        this.jButton2ActionPerformed(null);
    }//GEN-LAST:event_jTabbedPane1MousePressed

    private void btnICSPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnICSPathActionPerformed
        //FileCooser
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileFilter() {
            public boolean accept(File f) {
                return f.getName().toLowerCase().endsWith(".ical")  || f.isDirectory();
            }
            public String getDescription() {
                return "iCalender  (*.ical, *.ics)";
            }
        });
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            if (chooser.getSelectedFile().getName().endsWith(".ical") || chooser.getSelectedFile().getName().endsWith(".ics")) //ical format
            {
                File fc = chooser.getSelectedFile();
                String ret = fc.getAbsolutePath();
                jTextField1.setText(ret);
            }

        }
        //ActionPerformed
}//GEN-LAST:event_btnICSPathActionPerformed

    private void btnSavePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePathActionPerformed
        // TODO add your handling code here:
        //FileCooser
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileFilter() {
            public boolean accept(File f) {
                return f.getName().toLowerCase().endsWith(".saf") || f.isDirectory();
            }
            public String getDescription() {
                return "Semesterplaner-Binär-Dateien (*.saf)";
            }
        });
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            if (chooser.getSelectedFile().getName().endsWith(".ical") || chooser.getSelectedFile().getName().endsWith(".ics")) //ical format
            {
                File fc = chooser.getSelectedFile();
                String ret = fc.getAbsolutePath();
                jTextField4.setText(ret);
            }

        }
        //ActionPerformed
}//GEN-LAST:event_btnSavePathActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jTextField3ActionPerformed

    private void jFormattedTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextField1ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jFormattedTextField1ActionPerformed

    private void jbNextArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNextArchActionPerformed
        config.setNaechsteArch();
        Date help = config.getNaechsteArch();

        //String text = help.getYear() + "."+ help.getMonth() + "." + help.getDate();
        String datumFormat = "yyyy.M.d";	//Jahr.Monat.Tag-Stunde:Minute:Sekunde
        SimpleDateFormat sdf = new SimpleDateFormat(datumFormat);
        String text = sdf.format(help);

        
        System.out.println("DEBUG: "+text);
        jFormattedTextField1.setText(text);
}//GEN-LAST:event_jbNextArchActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jbLoadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLoadConfigActionPerformed
        ladeConfig();
}//GEN-LAST:event_jbLoadConfigActionPerformed

    private void jbLoadDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLoadDefaultActionPerformed
        config.loadDefault();
        ladeConfig();
}//GEN-LAST:event_jbLoadDefaultActionPerformed

    private void jrbDmLoeschenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbDmLoeschenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jrbDmLoeschenActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.konflikteAktualisieren(true);
        this.ges_tables_repaint();
}//GEN-LAST:event_jButton2ActionPerformed

    private void jbSaveConfigMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbSaveConfigMouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_jbSaveConfigMouseClicked

    private void jbSaveConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveConfigActionPerformed
        saveConfig();
    }//GEN-LAST:event_jbSaveConfigActionPerformed

    /* */
    //Buttons anmelden
    public JTable getTable2()
    {
        return jT_tag01;
    }

    public JTable getTable3()
    {
        return jT_tag02;
    }

    public JTable getTable4()
    {
        return jT_tag03;
    }

    public JTable getTable5()
    {
        return jT_tag04;
    }

    public JTable getTable6()
    {
        return jT_tag05;
    }

    public JTable getTable7()
    {
        return jT_tag06;
    }

    public JTable getTable8()
    {
        return jT_tag07;
    }

    public void resetTables()
    {
        Vector<Object> a = new Vector<Object>();
        Vector<Object> b = new Vector<Object>();
        b.add("NIX");
        
        for (int I = 0 ; I < this.anzahl_zeilen ; I++)
            a.add(null);

        
        AttributiveCellTableModel ml_01 = (AttributiveCellTableModel) jT_tag01.getModel();
        ml_01.setDataVector((Vector<Object>) a.clone(), (Vector<Object>)  b.clone());
        AttributiveCellTableModel ml_02 = (AttributiveCellTableModel) jT_tag02.getModel();
        ml_02.setDataVector((Vector<Object>) a.clone(), (Vector<Object>)  b.clone());
        AttributiveCellTableModel ml_03 = (AttributiveCellTableModel) jT_tag03.getModel();
        ml_03.setDataVector((Vector<Object>) a.clone(), (Vector<Object>)  b.clone());
        AttributiveCellTableModel ml_04 = (AttributiveCellTableModel) jT_tag04.getModel();
        ml_04.setDataVector((Vector<Object>) a.clone(), (Vector<Object>)  b.clone());
        AttributiveCellTableModel ml_05 = (AttributiveCellTableModel) jT_tag05.getModel();
        ml_05.setDataVector((Vector<Object>) a.clone(), (Vector<Object>)  b.clone());
        AttributiveCellTableModel ml_06 = (AttributiveCellTableModel) jT_tag06.getModel();
        ml_06.setDataVector((Vector<Object>) a.clone(), (Vector<Object>)  b.clone());
        AttributiveCellTableModel ml_07 = (AttributiveCellTableModel) jT_tag07.getModel();
        ml_07.setDataVector((Vector<Object>) a.clone(), (Vector<Object>)  b.clone());

        gtsk.clear();      //Konflikttermine aktualisieren
        gtsk.tsAnlegen(gts.tKonfliktsuche());
    }

    /**
     * Zeichnet die 7 Tages uebersicht neu.
     */
    public void repaint_7_tages_uebersicht()
    {
        Calendar c = (Calendar) this.nextweek.clone();
        c.add(Calendar.DAY_OF_MONTH, -7);
        setWeek(c);
    }

    /**
     * Setzt die 7-Tages uebersicht auf den angegebenen Tag und wird dabei neu gezeichnet.
     * @param calendar Der Tag der der erste Tag sein soll.
     */
    public void setWeek(Calendar calendar)
    {
        TreeSet<Termin> tsInt = null;
        TreeSet<Termin> tTemp = null;
        JTable tabelle = null;
        int use_col;
        
        resetTables();
        Calendar c_day_beginn = new GregorianCalendar();
        Calendar c_day_ende = new GregorianCalendar();
        c_day_beginn.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH), 0,0,0);
        c_day_ende.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH), 23,59,59);


        //nächste woche setzen
        nextweek = (Calendar) calendar.clone();
        nextweek.add(Calendar.DAY_OF_WEEK, 7);

        System.out.println(calendar.getTime()+"---------------------------------");

        //Datum übergeben, TreeSet holen und für den Tag durchgehen
        DateFormat dateFormat = new SimpleDateFormat("EEE, dd.MM.yy",Locale.GERMANY);



        Date[] datum = new Date[8];
        datum[0] = calendar.getTime();

        //calendar.add(Calendar.DAY_OF_MONTH, -1);
        for(int i = 1; i<=7; i++)
	{
        if(i!=1){
            c_day_beginn.add(Calendar.DAY_OF_MONTH, 1);
            c_day_ende.add(Calendar.DAY_OF_MONTH, 1);
        }


		datum[i] = c_day_beginn.getTime();

                System.out.println(c_day_beginn.getTime());


                 switch (i)
                {
                  case 1:
                     tabelle = getTable2();
                     System.out.println("11111111111111111111111");break;
                  case 2:
                     tabelle = getTable3();
                     System.out.println("222222222222222");break;
                  case 3:
                     tabelle = getTable4();
                     System.out.println("333333333333333333333");break;
                  case 4:
                     tabelle = getTable5();
                     System.out.println("4444444444444444444444441");break;
                  case 5:
                     tabelle = getTable6();
                     System.out.println("555555555555555555555555555555");break;
                  case 6:
                     tabelle = getTable7();
                     System.out.println("6666666666666666");break;
                  case 7:
                     tabelle = getTable8();
                     System.out.println("77777777777777777777777");break;
                  default:
                     System.out.println("n0n0n0nn0n0n00n0n0n0");break;
            }
            //System.out.println("ganzer Tag: "+gts.tBeginntZwischen(calendar.get(Calendar.YEAR) + "." + calendar.get(Calendar.MONTH)+1 + "." + calendar.get(Calendar.DAY_OF_MONTH) + "-00:00:00",
            //        calendar.get(Calendar.YEAR) + "." + calendar.get(Calendar.MONTH)+1 + "." + calendar.get(Calendar.DAY_OF_MONTH) + "-23:59:59"));
            System.out.println("Von: " + c_day_beginn.getTime() + " bis: " + c_day_ende.getTime());
            try {
                System.out.println("ganzer Tag: " + gts.tBeginntZwischen(FunctionCollection.convertDatetoString(c_day_beginn.getTime()), FunctionCollection.convertDatetoString(c_day_ende.getTime())));
            } catch (ParseException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            }


        try {
            tsInt = gts.tBeginntZwischen(FunctionCollection.convertDatetoString(c_day_beginn.getTime()),
                                         FunctionCollection.convertDatetoString(c_day_ende.getTime()));
        } catch (ParseException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }


        //Terminkonflikte holen
        TerminKonfliktContainer tkc = new TerminKonfliktContainer();
        tkc.buildTree(tsInt, gtsk);

        //Tabelle neu aufbauen
        String tabname = tabelle.getColumnName(0);
        AttributiveCellTableModel ren = new AttributiveCellTableModel(anzahl_zeilen,tkc.getMaxSize());
        Object[] header = new Object[tkc.getMaxSize()];
        header[0] = tabname;

        ren.setDataVector(new Object[anzahl_zeilen][tkc.getMaxSize()], header);
        tabelle.setModel(ren);

        Iterator itr;

        Termin temp;
        TreeSet<Termin> termine;

        while(true)  {
            termine = tkc.getKonfTermineNext();
            if (termine == null)
                break;

            itr = termine.iterator();
            use_col = -1;
             while(itr.hasNext())   {
                    temp = (Termin) itr.next();
                    use_col++;
                    System.out.println("Eintrag: "+temp.toString());


                    System.out.println("starttime: "+temp.getStt());
                    System.out.println("bez: "+temp.getBez());
                    System.out.println("ort: "+temp.getOrt());
                    System.out.println("bem: "+temp.getBem());
                    System.out.println("stoptime: "+temp.getStp());


                      if(temp.toString().length() == 0)
                            {
                                System.out.println("leeeeeeeeeeeeeeeeeeeeeeeeeeeer");
                            }


                    //Dauer in Minuten
                    long dauer = (temp.getStp().getTime() - temp.getStt().getTime())/1000/60;

                    //Einheiten je 15min
                    double einheiten = Math.ceil((double)dauer/15);

                    System.out.println(dauer);
                    System.out.println(einheiten);

                    Calendar stundenAnfangC = new GregorianCalendar(0,0,0,temp.getStt().getHours(),temp.getStt().getMinutes());
                    Calendar stundenEndeC = new GregorianCalendar(0,0,0,temp.getStp().getHours(),temp.getStp().getMinutes());

                    Calendar vergleichsstunde_groesser = new GregorianCalendar(0,0,0,0,0); //00 00 00
                    Calendar vergleichsstunde_kleiner = new GregorianCalendar(0,0,0,0,15); //00 15 00

                    Calendar vergleichsstunde_ende = new GregorianCalendar(0,0,0,23,46); //geht solange wir kleiner als das sind!

                    int minuten_combine = (int) Math.ceil((stundenEndeC.getTimeInMillis() - stundenAnfangC.getTimeInMillis()) / 1000 / 60);
                    int anz_combine = (int) Math.ceil(minuten_combine / 15);

                    final DefaultCellAttribute cellAtt;


                    for (int I = 0; I <= 95 ;  I++)
                    {
                        if (stundenAnfangC.compareTo(vergleichsstunde_groesser) >= 0 &&
                                stundenAnfangC.compareTo(vergleichsstunde_kleiner) < 0)
                        {
                            //Um Minuten unterschied / 15 x verbinden
                            AttributiveCellTableModel ml = ((AttributiveCellTableModel) tabelle.getModel());
                            cellAtt =  (DefaultCellAttribute) ml.getCellAttribute();
                            cellAtt.combine(FunctionCollection.getArrayWithNumbers(I, I+anz_combine), new int[]{use_col});

                            //Termine die Manuell sind haben werden testweise gelb eingefaerbt
                            if (use_col > 0)
                                cellAtt.setBackground(Color.ORANGE, I, use_col);


                          
                            tabelle.setValueAt(new TerminTabelle(temp), I, use_col);
                            break;
                        }
                        vergleichsstunde_groesser.add(Calendar.MINUTE, 15);
                        vergleichsstunde_kleiner.add(Calendar.MINUTE, 15);
                    }
            }

       }


        tabelle.clearSelection();
        tabelle.revalidate();
        tabelle.repaint();


        }

        getTable2().getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[1]));
        getTable3().getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[2]));
        getTable4().getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[3]));
        getTable5().getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[4]));
        getTable6().getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[5]));
        getTable7().getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[6]));
        getTable8().getColumnModel().getColumn(0).setHeaderValue(dateFormat.format(datum[7]));


        getTable2().getTableHeader().repaint();
        getTable3().getTableHeader().repaint();
        getTable4().getTableHeader().repaint();
        getTable5().getTableHeader().repaint();
        getTable6().getTableHeader().repaint();
        getTable7().getTableHeader().repaint();
        getTable8().getTableHeader().repaint();

    }


    /**
     * Zeit eine Fehlermeldung mit den angegebenen Text
     * @param text
     */
    public void showErrorMessage(String text)
    {
        JOptionPane.showMessageDialog(this, text, "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Zeit eine Meldung mit den angegebenen Text
     * @param text
     */
    public void showMessage(String text)
    {
        JOptionPane.showMessageDialog(this, text, "Hinweis", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Schliesst den Semesterplaner und Speichert den Terminsatz falls erforderlich.
     */
    protected void closeSMPlaner()
    {
        if (!config.getDirty())
        {
            System.out.println("Terminsatz nicht gespeichert");
            this.dispose();
            System.exit(0);
        }

        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); //TODO: irgendwie gehts nicht anders, muss hier gemacht werden...
        boolean error = false;
        //Binärdatei sichern
        BinaryEx ex = new BinaryEx(config.getSpeicherPfad() + File.separatorChar + Config.SaveFile);
        try {
            TreeSet<Termin> aaa = null;
            try {
                aaa = gts.tBeginntZwischen(FunctionCollection.convertDatetoString(new Date(0)), FunctionCollection.convertDatetoString(new Date(Long.MAX_VALUE)));
            } catch (ParseException ex1) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex1);
            }
            ex.proceed(aaa);
            System.out.println("Terminsatz gespeichert. Anzahl:" + aaa.size());

        } catch (IOException ex1) {
            
            int i = JOptionPane.showOptionDialog(this, "Konnte Terminsatz nicht speichern: " + ex1.getLocalizedMessage() + ". Trotzdem beenden?" , "Error", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, null, null);
            System.out.println(i);
            if (i == 0)
                error = false;
            else
                error = true;
        } catch (ContainerException ex1)
        {
            //Tritt nicht auf
        }

        if (!error)
        {
            this.dispose();
            System.exit(0);
        }
    }

  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnICSPath;
    private javax.swing.JButton btnSavePath;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    protected javax.swing.JCheckBox ende_date_ch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPGesamtzeit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jSP_tag01;
    private javax.swing.JScrollPane jSP_tag02;
    private javax.swing.JScrollPane jSP_tag03;
    private javax.swing.JScrollPane jSP_tag04;
    private javax.swing.JScrollPane jSP_tag05;
    private javax.swing.JScrollPane jSP_tag06;
    private javax.swing.JScrollPane jSP_tag07;
    private javax.swing.JScrollPane jSP_zeit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTGesammtzeit;
    private semesterplaner.libs.SplitTable.MultiSpanCellTable jT_tag01;
    private semesterplaner.libs.SplitTable.MultiSpanCellTable jT_tag02;
    private semesterplaner.libs.SplitTable.MultiSpanCellTable jT_tag03;
    private semesterplaner.libs.SplitTable.MultiSpanCellTable jT_tag04;
    private semesterplaner.libs.SplitTable.MultiSpanCellTable jT_tag05;
    private semesterplaner.libs.SplitTable.MultiSpanCellTable jT_tag06;
    private semesterplaner.libs.SplitTable.MultiSpanCellTable jT_tag07;
    private semesterplaner.libs.SplitTable.MultiSpanCellTable jT_zeit;
    protected javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    protected javax.swing.JButton jbDmOk;
    private javax.swing.JButton jbLoadConfig;
    private javax.swing.JButton jbLoadDefault;
    private javax.swing.JButton jbNextArch;
    private javax.swing.JButton jbSaveConfig;
    protected javax.swing.JComboBox jcbDmPrio;
    protected javax.swing.JComboBox jcbDmStpJahr;
    protected javax.swing.JComboBox jcbDmStpMin;
    protected javax.swing.JComboBox jcbDmStpMon;
    protected javax.swing.JComboBox jcbDmStpSek;
    protected javax.swing.JComboBox jcbDmStpStd;
    protected javax.swing.JComboBox jcbDmStpTag;
    protected javax.swing.JComboBox jcbDmSttJahr;
    protected javax.swing.JComboBox jcbDmSttMin;
    protected javax.swing.JComboBox jcbDmSttMon;
    protected javax.swing.JComboBox jcbDmSttSek;
    protected javax.swing.JComboBox jcbDmSttStd;
    protected javax.swing.JComboBox jcbDmSttTag;
    protected javax.swing.JFormattedTextField jftfDmNbz;
    protected javax.swing.JFormattedTextField jftfDmVbz;
    private javax.swing.JLabel jlApr;
    private javax.swing.JLabel jlAug;
    private javax.swing.JLabel jlDez;
    private javax.swing.JLabel jlFeb;
    private javax.swing.JLabel jlJan;
    private javax.swing.JLabel jlJul;
    private javax.swing.JLabel jlJun;
    private javax.swing.JLabel jlMae;
    private javax.swing.JLabel jlMai;
    private javax.swing.JLabel jlNov;
    private javax.swing.JLabel jlOkt;
    protected javax.swing.JLabel jlSep;
    private javax.swing.JPanel jpTerminattribute;
    private javax.swing.JPanel jpTerminoptionen;
    protected javax.swing.JRadioButton jrbDmAnlegen;
    protected javax.swing.JRadioButton jrbDmExportieren;
    protected javax.swing.JRadioButton jrbDmLoeschen;
    protected javax.swing.JRadioButton jrbDmSuchen;
    protected javax.swing.JTable jtApr;
    protected javax.swing.JTable jtAug;
    protected javax.swing.JTable jtDez;
    protected javax.swing.JTable jtFeb;
    protected javax.swing.JTable jtJan;
    protected javax.swing.JTable jtJul;
    protected javax.swing.JTable jtJun;
    protected javax.swing.JTable jtMae;
    protected javax.swing.JTable jtMai;
    protected javax.swing.JTable jtNov;
    protected javax.swing.JTable jtOkt;
    protected javax.swing.JTable jtSep;
    protected javax.swing.JTextArea jtaDmBem;
    protected javax.swing.JTextField jtfDmBez;
    protected javax.swing.JTextField jtfDmOrt;
    protected javax.swing.JTextField jtfDmTyp;
    protected javax.swing.JButton nextWeek;
    private javax.swing.JPanel pSs;
    private javax.swing.JPanel pWs;
    protected javax.swing.JButton prevWeek;
    protected javax.swing.JCheckBox start_date_ch;
    protected javax.swing.JMenuItem termiCalExp;
    protected javax.swing.JMenuItem termineArchi;
    protected javax.swing.JMenuItem termineImport;
    protected javax.swing.JMenuItem termine_htwm;
    protected javax.swing.JMenuItem tsatz_ausgeben;
    // End of variables declaration//GEN-END:variables

    //aktuelles Datum in Tabellen Header
    SimpleDateFormat sd = new SimpleDateFormat("EEE, dd.MM",Locale.GERMANY);
    String datumHeute = sd.format(new Date()); 

    /**fuelleDm
     * Befüllt die Datenmaske mit den Attributen des übergebenen Termins
     * @param t Termin dessen Attribute in die Datenmaske geladen werden sollen
     */
    protected void fuelleDm(Termin t)  {
        Calendar datum_obj = new GregorianCalendar();
        datum_obj.setTime(t.getStt());
        jtfDmBez.setText("");
        jtfDmBez.setText(t.getBez());
        //Startzeitpunkt
        jcbDmSttTag.setSelectedIndex(datum_obj.get(Calendar.DAY_OF_MONTH)-1);
        jcbDmSttMon.setSelectedIndex(datum_obj.get(Calendar.MONTH));
        jcbDmSttJahr.setSelectedIndex(datum_obj.get(Calendar.YEAR)-1970);
        jcbDmSttStd.setSelectedIndex(datum_obj.get(Calendar.HOUR_OF_DAY));
        jcbDmSttMin.setSelectedIndex(datum_obj.get(Calendar.MINUTE));
        jcbDmSttSek.setSelectedIndex(datum_obj.get(Calendar.SECOND));
        //Stopzeitpunkt
        datum_obj.setTime(t.getStp());
        jcbDmStpTag.setSelectedIndex(datum_obj.get(Calendar.DAY_OF_MONTH)-1);
        jcbDmStpMon.setSelectedIndex(datum_obj.get(Calendar.MONTH));
        jcbDmStpJahr.setSelectedIndex(datum_obj.get(Calendar.YEAR)-1970);
        jcbDmStpStd.setSelectedIndex(datum_obj.get(Calendar.HOUR_OF_DAY));
        jcbDmStpMin.setSelectedIndex(datum_obj.get(Calendar.MINUTE));
        jcbDmStpSek.setSelectedIndex(datum_obj.get(Calendar.SECOND));
        jtfDmOrt.setText("");
        jftfDmVbz.setText("");
        jftfDmNbz.setText("");
        jtfDmTyp.setText("");
        jcbDmPrio.setSelectedIndex(t.getPrio());
        jtaDmBem.setText("");
        jtfDmOrt.setText(t.getOrt());
        jftfDmVbz.setText(t.getVbz().toString());
        jftfDmNbz.setText(t.getNbz().toString());
        jtfDmTyp.setText(t.getTyp());
        jcbDmPrio.setSelectedItem(t.getPrio());
        jtaDmBem.setText(t.getBem());
        jTabbedPane1.setSelectedIndex(2);
    }

    /**
     * Erneuert die Konflikttabelle
     * @param rewrite gtsz erneut mit den Werten von gts befuellen (gtsz = Gesonderter Terminsatz fuer die Semesteruebersicht, gts = Normaler Terminsatz)
     */
    public void konflikteAktualisieren(boolean rewrite)
    {
        if (rewrite)
        {
            gtsz.clear();
            gtsz.tsAnlegen(gts.gettsBez());
        }
        
        gtszk.clear();
        gtszk.tsAnlegen(gtsz.tKonfliktsuche()); 
    }

    private void ladeConfig()
    {
        jTextField1.setText(config.getTempPfad());
        jTextField2.setText(config.getServerUrl());
        jTextField3.setText(config.getSemGr());
        jTextField4.setText(config.getSpeicherPfad());
        Date help = config.getNaechsteArch();
        jFormattedTextField1.setText(help.getYear() + "." + help.getMonth() + "." + help.getDate());
        jCheckBox1.setSelected(config.isAutoAkt());
        jCheckBox2.setSelected(config.isAutoKonflLsg());
        jPanel5.repaint();
    }

    private void saveConfig()
    {
        config.setTempPfad(jTextField1.getText());
        config.setServerUrl(jTextField2.getText());
        config.setSemGr(jTextField3.getText());
        config.setSpeicherPfad(jTextField4.getText());
        Date help = new Date();
        String zwischen = jFormattedTextField1.getText();
        String [] datum = zwischen.split("\\.");
        System.out.println("DEBUG: saveConfig " + datum[0] + "."+datum[1]+"."+datum[2]);
        help.setYear(Integer.parseInt(datum[0]));
        help.setMonth(Integer.parseInt(datum[1]));
        help.setDate(Integer.parseInt(datum[2]));
        config.setNaechsteArch(help);
        config.setAutoAkt(jCheckBox1.isSelected());
        config.setAutoKonflLsg(jCheckBox2.isSelected());
        config.speichereConfig();
    }
}
